#+TITLE: Guideline for Contributing
#+DATE: Tuesday, Jul 05 2016
#+OPTIONS: num:t
#+STARTUP: overview

* Getting Started

** Prerequisite

   See README [[https://github.com/foss-np/anubad/tree/experimental#manual][#manual]]

** Coding Style

   - our coding style is loosly based on [[https://www.python.org/dev/peps/pep-0008/][PEP 8]]
   - *4* *spaces* for indentation is the [[https://github.com/Stitchpunk/atari-ai][must]]
   - try to fit each line with in *80* columns margin
   - if your indent more than 5 level, something not right

   We encourage move beyond the [[https://www.python.org/dev/peps/pep-0008/][PEP 8]] and code more pythonic and human
   readable form.

** Guidelines for new GNOME developers

   Beyond the prerequisite mentioned above, several tools available
   for assisting the development of *GNOME* application.

*** Recommended tools

    [[https://wiki.gnome.org/Apps/Devhelp][DevHelp]]: An API documentation browser for *GNOME*

    [[http://glade.gnome.org/][Glade]]: A GUI designer for *GTK+ Applications*

    A good *text-editor* or *IDE* (Integrated Development Environment)

* Inside Repository

  There are mainly 3 branches,

  | Branch       | Description                   |
  |--------------+-------------------------------|
  | master       | stable working version        |
  | dev          | version for power users       |
  | experimental | version for hackers/developer |


  Start with =dev= branch to begin development, =master= branch is
  usually *stable* branch for /common users/.

  If you want to be upto date with latest development use
  =experimental= which might be really :fire: *unstable* :fire:.

** Organization

   #+BEGIN_EXAMPLE
     anubad/
     ├── CONTRIBUTING.org      # this file
     ├── Makefile.am           # for gnome-style build
     ├── autogen.sh            # for gnome-style build
     ├── configure.ac          # for gnome-style build
     ├── default.ini           # default configuration file
     ├── demo.pyw              # legacy version of anubad
     :
     ├── assets/               # icons
     ├── help/                 # help files
     ├── plugins/              # default plugin folder
     │   ├── espeak.py
     │   :
     │   └── number2word.py
     ├── ...
     :
     └── src/                  # source code
         ├── core.py
         ├── main.py
         :
         ├── Makefile          # lists runnable recipies
         └── ui
             ├── home.py       # home ui component
             ├── home.css      # css file for home.py
             :
             └── Makefile      # lists runnable recipies
   #+END_EXAMPLE

   file naming convention in repository

   | Pattern          | Description                          |
   |------------------+--------------------------------------|
   | plugins/*.{c,py} | plugin codes                         |
   | src/*.{c,py}     | anubad source codes                  |
   | src/ui/_*.css    | css file for /Window/ with same name |
   | src/ui/_*.py     | widgets componets of /Window/        |


** Coding Convention

   *Every python file should be executed separately*

   - Try to include relative functionality in one place
   - Don't littering your code
   - Include doctest if possible
   - it would be nice to have unit test

*** naming

    - variables
      + Injected /variable/ name should be in *UPPER CASE*
      + declarative path /variable/ should start with =PATH_= prefix
      + declarative file /variable/ should start with =FILE_= prefix

    - function
      + /function/ name should be *lower case*
      + prefix underscore '_' to nested /function/ name
      + no. of underscore '_' represent nested levels
      + encapsulate(nested) /function/ when its trival and tiny

** Comment style

   There are various keyword used inside comment, these are what they
   mean.

   | Keyword | Meaning                                          |
   |---------+--------------------------------------------------|
   | FIXME   | things that could be fixed but i'm lazy          |
   | TODO    | new task or feature/idea not done yet            |
   | BUG     | known annoying bug, which may/may not be fixable |
   | TIP     | just a friendly *NOTE*                           |
   | TESTING | thing that are not yet ready                     |
   | WARN    | *STOP IT*, have been then, you don't want to     |
   | NOTE    | something important, you should know             |




* Design

  Reference:
  - https://developer.gnome.org/gtk3/stable/chap-css-overview.html
  - https://gist.github.com/ptomato/0fb634ef4098bb89026f

* Tricks

  assortment developer friendly interface-engines.

  | Modes                 | Search prefix |
  |-----------------------+---------------|
  | Dump mode             | 'd:'          |
  | Command Line Access   | '$'           |
  | Internal Command Mode | '>'           |
